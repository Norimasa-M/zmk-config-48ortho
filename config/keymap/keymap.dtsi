/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#ifndef KEYMAP_DRAWER
#endif

#define DEF 0
#define NAV 1
#define NUM 2
#define FUN 3

#define CT(KEY) &mt LC(KEY) KEY

#define MEH     LC(LS(LALT))
#define HYPER   LC(LS(LA(LGUI)))

#define U_RDO   LC(DE_Y)
#define U_PST   LC(V)
#define U_PST_P LS(LC(V))
#define U_CPY   LC(C)
#define U_CUT   LC(X)
#define U_UND   LC(DE_Z)

#include "behaviors.dtsi"
#include "combos.dtsi"
#include "macros.dtsi"
#include "mouse.dtsi"

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer  {
            if-layers = <NAV NUM>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "DEF";
            bindings = <
&lt 3 ESCAPE      &kp Q         &kp W        &kp E         &kp R        &kp T        &kp Y        &kp U               &kp I           &kp O           &kp P         &kp BACKSPACE
&kp LEFT_CONTROL  &kp A         &kp S        &kp D         &kp F        &kp G        &kp H        &kp J               &kp K           &kp L           &kp MINUS     &mt RIGHT_CONTROL RETURN
&kp LEFT_SHIFT    &kp Z         &kp X        &kp C         &kp V        &kp B        &kp N        &kp M               &kp COMMA       &kp DOT         &kp SLASH     &kp RIGHT_SHIFT
&kp TAB           &kp LEFT_GUI  &lt 2 LANG2  &kp LEFT_ALT  &lt 1 LANG2  &kp SPACE    &lt 1 LANG1  &mt RIGHT_ALT LANG1 &kp LEFT_ARROW  &kp DOWN        &kp UP        &kp RIGHT
            >;
        };

        navigation_layer {
            display-name = "NAV";
            bindings = <
&kp KP_NUMLOCK  &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS    &kp N7  &kp N8      &kp N9  &kp JP_CARET  &kp JP_YEN  &kp DEL
&kp KP_ENTER    &kp KP_DOT       &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS     &kp N4  &kp N5      &kp N6  &kp JP_PIPE   &kp LBKT    &kp RBKT
&kp LEFT_SHIFT  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &numdot         &kp N1  &kp N2      &kp N3  &kp N0        &kp SLASH   &kp NUHS
&trans          &trans           &trans           &kp KP_DOT       &trans           &trans          &trans  &kp KP_DOT  &trans  &kp SEMI      &kp SQT     &kp JP_UNDER
            >;
        };

        number_layer {
            display-name = "NUM";
            bindings = <
&kp BSPC   &kp Y  &kp U  &kp I      &kp O    &kp P           &none       &none         &none         &none     &none      &kp DEL
&kp LCTRL  &kp H  &kp J  &kp K      &kp L    &kp RET         &none       &none         &none         &none     &none      &none
&kp LSHFT  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH        &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &none     &kp PG_UP  &none
&none      &none  &none  &none      &none    &kp K_COFFEE    &trans      &none         &none         &kp HOME  &kp PG_DN  &kp END
            >;
        };

        function_layer {
            display-name = "FUN";
            bindings = <
&none       &kp F1        &kp F2        &kp F3        &kp F4  &kp F5     &none         &none         &none         &none         &none         &bootloader
&none       &kp F6        &kp F7        &kp F8        &kp F9  &kp F10    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&none       &kp F11       &kp F12       &kp F13       &none   &none      &none         &none         &none         &none         &none         &ext_power EP_OFF
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none   &trans     &trans        &none         &trans        &trans        &none         &trans
            >;
        }; 

        extra1 {
            status = "reserved";
        };

        extra2 {
            status = "reserved";
        };
    };
};
